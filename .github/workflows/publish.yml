name: Publish

on:
  # When Release Pull Request is merged
  pull_request:
    branches:
      - master
    types: [closed]

env:
  DOCKER_BASE_NAME: docker.pkg.github.com/${{ github.repository }}/secretlint
  DOCKER_HUB_BASE_NAME: secretlint/secretlint

jobs:
  hadolint:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - run: brew install hadolint
    - run: hadolint ./Dockerfile
      working-directory: ./publish/docker

  publish:
    name: Publish
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node_version: 12
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: yarn install
      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "::set-env name=CURRENT_VERSION::${CURRENT_VERSION}"
      - name: Tag Check
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/${GIT_TAG_NAME}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Git Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: azu/action-package-version-to-git-tag@v1
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"
      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
      - name: Publish
        if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          yarn lerna publish from-package --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ‰ Release https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }}'
            })

  publish-docker:
    runs-on: ubuntu-18.04
    needs: [hadolint, publish]
    steps:
    - uses: actions/checkout@v2
    - name: "Set TAG_NAME=tags"
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "::set-env name=TAG_NAME::${GITHUB_REF:10}"
        echo "::set-env name=SECRETLINT_VERSION::${GITHUB_REF:11}"
    - name: "Set TAG_NAME=LATEST"
      if: startsWith(github.ref, 'refs/tags/') != true
      run: |
        echo "::set-env name=TAG_NAME::latest"
        echo "::set-env name=SECRETLINT_VERSION::latest"
    - name: Set HUB_TAG
      run: |
        echo "::set-env name=PKG_TAG::${DOCKER_BASE_NAME}:${TAG_NAME}"
        echo "::set-env name=HUB_TAG::${DOCKER_HUB_BASE_NAME}:${TAG_NAME}"
    - name: Build image
      run: |
        docker build . -t "${PKG_TAG}" --build-arg SECRETLINT_VERSION=${SECRETLINT_VERSION}
        docker tag "${PKG_TAG}" "${HUB_TAG}"
      working-directory: ./publish/docker
    - name: Print version
      run: |
        docker run --rm ${PKG_TAG} --version
      working-directory: ./publish/docker
    - name: Scan image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${HOME}/.cache:/root/.cache aquasec/trivy:latest --exit-code 1 ${PKG_TAG}
      working-directory: ./publish/docker

    - name: Login to Registries
      if: github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        echo "${GITHUB_TOKEN}" | docker login docker.pkg.github.com -u azu --password-stdin
        echo "${DOCKER_HUB_TOKEN}" | docker login -u efcl --password-stdin

    - name: Push to GitHub Packages
      if: github.event_name != 'pull_request'
      run: docker push "${PKG_TAG}"

    - name: Push to Docker Hub
      if: github.event_name != 'pull_request'
      run: docker push "${HUB_TAG}"

  publish-binary:
    needs: [publish]
    runs-on: ${{ matrix.os }}
    # Release only
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-18.04]
        node_version: [12.9.1] # pre-build nexe https://github.com/nexe/nexe/releases/tag/v3.0.0
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}
      - name: Install
        run: npm install # avoid hoisting https://github.com/nexe/nexe/issues/649
        working-directory: ./publish/binary-compiler
      - name: Build binary
        run: npm run dist
        working-directory: ./publish/binary-compiler
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: ./publish/binary-compiler/dist
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: "./publish/binary-compiler/dist/**"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
